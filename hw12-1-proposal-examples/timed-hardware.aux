\relax 
\providecommand\hyper@newdestlabel[2]{}
\providecommand\HyperFirstAtBeginDocument{\AtBeginDocument}
\HyperFirstAtBeginDocument{\ifx\hyper@anchor\@undefined
\global\let\oldcontentsline\contentsline
\gdef\contentsline#1#2#3#4{\oldcontentsline{#1}{#2}{#3}}
\global\let\oldnewlabel\newlabel
\gdef\newlabel#1#2{\newlabelxx{#1}#2}
\gdef\newlabelxx#1#2#3#4#5#6{\oldnewlabel{#1}{{#2}{#3}}}
\AtEndDocument{\ifx\hyper@anchor\@undefined
\let\contentsline\oldcontentsline
\let\newlabel\oldnewlabel
\fi}
\fi}
\global\let\hyper@last\relax 
\gdef\HyperFirstAtBeginDocument#1{#1}
\providecommand\HyField@AuxAddToFields[1]{}
\providecommand\HyField@AuxAddToCoFields[2]{}
\bibstyle{ACM-Reference-Format}
\@writefile{toc}{\contentsline {paragraph}{The domain}{1}{section*.1}}
\@writefile{toc}{\contentsline {paragraph}{The current practice}{1}{section*.2}}
\@writefile{toc}{\contentsline {paragraph}{The problem}{1}{section*.3}}
\@writefile{toc}{\contentsline {paragraph}{Solution}{1}{section*.4}}
\newlabel{tocindent-1}{0pt}
\newlabel{tocindent0}{0pt}
\newlabel{tocindent1}{6.95pt}
\newlabel{tocindent2}{0pt}
\newlabel{tocindent3}{0pt}
\gdef\minted@oldcachelist{,
  default-pyg-prefix.pygstyle,
  default.pygstyle,
  6380C1A95AD4CD21B3A7A673A1178E81FF7FBE08D727CC24E6EB6FD3D9F8F14A.pygtex,
  22C3545BD819384E766DB7271873DF0AFF7FBE08D727CC24E6EB6FD3D9F8F14A.pygtex}
\@writefile{lof}{\contentsline {figure}{\numberline {1}{\ignorespaces  An imperative C-like setup-loop program that illustrates how programmers program small hardware devices with input, output, and delay primtives.\relax }}{2}{figure.caption.5}}
\providecommand*\caption@xref[2]{\@setref\relax\@undefined{#1}}
\newlabel{prog1}{{1}{2}{An imperative C-like setup-loop program that illustrates how programmers program small hardware devices with input, output, and delay primtives.\relax }{figure.caption.5}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {2}{\ignorespaces  This program shows that, even for a simple 1-input-1-output scenario, the programmer must solve for magic numbers -- e.g. 5 -- to implement timing constraints (input: 500ms, output: 2500 ms), and the magic number appears in multiple places (control flow, memory allocation) in the program.\relax }}{2}{figure.caption.6}}
\newlabel{prog2}{{2}{2}{This program shows that, even for a simple 1-input-1-output scenario, the programmer must solve for magic numbers -- e.g. 5 -- to implement timing constraints (input: 500ms, output: 2500 ms), and the magic number appears in multiple places (control flow, memory allocation) in the program.\relax }{figure.caption.6}{}}
\newlabel{TotPages}{{2}{2}{}{page.2}{}}
